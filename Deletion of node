# include<bits/stdc++.h>
using namespace std;
class Node{
  public: 
  int data;
  Node* next;
  
 Node(int data){
     this->data= data;
     this->next= NULL;
 }
 ~Node(){
     int value = this->data;
     if(this->next!=NULL){
          delete next;
          this->next = NULL;
         cout<<"Memory has been freed for the value "<<value<<endl;
     }
 }
};
void insertAtHead(Node* &head, int d){
    Node* temp = new Node(d);
    temp->next = head;
    head = temp;
}
void insertAtTail(Node* &tail, int d){
    Node* temp = new Node(d);
    tail->next = temp;
    temp = tail;
}
void print(Node* &head){
    Node* temp = head;
    while(temp!=NULL){
        cout<<temp -> data<<" ";
        temp= temp -> next;
    }
    cout<<endl;
}
void insertAtPosition(Node* &head, Node* &tail, int position, int d){
    if(position==1){
        insertAtHead(head, d);
        return;
    }
    Node* temp = head;
    int cnt = 1;
    while(cnt < position-1){
        temp = temp->next;
        cnt++;
    }
    if(temp -> next == NULL) {
        insertAtTail(tail,d);
        return ;
    }
    Node* nodeToInsert = new Node(d);

    nodeToInsert -> next = temp -> next;

    temp -> next = nodeToInsert;
    }
    void deleteNode(int position, Node* head){
        if(position == 1){
            Node* temp = head;
            head->next = head;
        delete temp;
        } 
       Node* curr = head;
       Node* prev = NULL;
       int cnt = 1;
       while(cnt<position){
          prev = curr;
           curr = curr->next;
           cnt++;
                }
        prev->next = curr->next;
    }
int main(){
    Node* node1=new Node(10);
    Node* head = node1;
    Node* tail = node1;
    print(head);
    insertAtHead(head, 12);
    print(head);
    insertAtHead(head, 15);
    print(head);
    insertAtPosition(head, tail, 3, 22);
    print(head);
    insertAtPosition(head, tail, 4, 25);
    print(head);
    deleteNode(3, head);
print(head);
    
}
